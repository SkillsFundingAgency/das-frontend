@import "vendors/sass-mq";

@mixin font($size, $weight: regular, $line-height: false) {

  @include typography-common;
  @if $weight == regular {
    font-weight: $font-weight-regular;
  } @else if $weight == light {
    font-weight: $font-weight-light;
  } @else if $weight == bold {
    font-weight: $font-weight-bold;
  }

  @if $size {
    @include typography-responsive($size, $override-line-height: $line-height);
  }
}

@mixin typography-common($font-family: $font-family) {
  font-family: $font-family;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin typography-responsive($size, $override-line-height: false, $important: false) {

  @if not map-has-key($typography-scale, $size) {
    @error "Unknown font size `#{$size}` - expected a point from the typography scale.";
  }

  $font-map: map-get($typography-scale, $size);

  @each $breakpoint, $breakpoint-map in $font-map {
    $font-size: map-get($breakpoint-map, "font-size");
    $line-height: _line-height(
        $line-height: if($override-line-height,
                $override-line-height,
                map-get($breakpoint-map, "line-height")
        ),
        $font-size: $font-size
    );

    // Mark rules as !important if $important is true - this will result in
    // these variables becoming strings, so this needs to happen *after* they
    // are used in calculations
    $font-size: $font-size;
    $line-height: $line-height;

    @if $breakpoint == null {
      font-size: $font-size; // sass-lint:disable no-duplicate-properties
      line-height: $line-height;
    } @else if $breakpoint == "print" {
      @include media-query($media-type: print) {
        font-size: $font-size;
        line-height: $line-height;
      }
    } @else {
      @include media-query($from: $breakpoint) {
        font-size: $font-size; // sass-lint:disable no-duplicate-properties
        line-height: $line-height;
      }
    }
  }
}

@function _line-height($line-height, $font-size) {
  @if not unitless($line-height) and unit($line-height) == unit($font-size) {
    $line-height: $line-height / $font-size;
  }

  @return $line-height;
}

@mixin media-query($args...) {
  @include mq($args...) {
    @content;
  };
}

@mixin responsive-spacing($responsive-spacing-point, $property, $direction: "all", $important: false, $adjustment: false) {

  $actual-input-type: type-of($responsive-spacing-point);
  @if $actual-input-type != "number" {
    @error "Expected a number (integer), but got a " + "#{$actual-input-type}.";
  }

  @if not map-has-key($spacing-responsive-scale, $responsive-spacing-point) {
    @error "Unknown spacing point `#{$responsive-spacing-point}`. Make sure you are using a point from the "
    + "responsive spacing scale in `_settings/spacing.scss`.";
  }

  // Make sure that the return value from `_settings/spacing.scss` is a map.
  $scale-map: map-get($spacing-responsive-scale, $responsive-spacing-point);
  $actual-map-type: type-of($scale-map);
  @if $actual-map-type != "map" {
    @error "Expected a number (integer), but got a "
    + "#{$actual-map-type}. Make sure you are using a map to set the responsive spacing in `_settings/spacing.scss`)";
  }

  // Loop through each breakpoint in the map
  @each $breakpoint, $breakpoint-value in $scale-map {

    @if ($adjustment) {
      $breakpoint-value: $breakpoint-value + $adjustment;
    }

    // The 'null' breakpoint is for mobile.
    @if $breakpoint == null {

      @if $direction == all {
        #{$property}: $breakpoint-value;
      } @else {
        #{$property}-#{$direction}: $breakpoint-value;
      }
    } @else {
      @include media-query($from: $breakpoint) {
        @if $direction == all {
          #{$property}: $breakpoint-value;
        } @else {
          #{$property}-#{$direction}: $breakpoint-value;
        }
      }
    }
  }
}

@mixin responsive-margin($responsive-spacing-point, $direction: "all", $important: false, $adjustment: false) {
  @include responsive-spacing($responsive-spacing-point, "margin", $direction, $important, $adjustment);
}

@mixin responsive-padding($responsive-spacing-point, $direction: "all", $important: false, $adjustment: false) {
  @include responsive-spacing($responsive-spacing-point, "padding", $direction, $important, $adjustment);
}

@mixin focusable {
  &:focus {
    outline: $focus-width solid $focus-colour;
    outline-offset: 0;
  }
}

@mixin focusable-fill {
  &:focus {
    outline: $focus-width solid $focus-colour;
    outline-offset: 0;
    background-color: $focus-colour;
  }
}

@mixin focus-outline { outline: 3px solid $focus-colour; outline-offset: 0; }
@mixin focus-background { outline: 3px solid $focus-colour; outline-offset: 0; background-color: $focus-colour; color: #000; }
@mixin focus-border { border: 3px solid $focus-colour }

@function spacing($spacing-point) {

  $actual-input-type: type-of($spacing-point);
  @if $actual-input-type != "number" {
    @error "Expected a number (integer), but got a "
    + "#{$actual-input-type}.";
  }

  @if not map-has-key($spacing-points, $spacing-point) {
    @error "Unknown spacing variable `#{$spacing-point}`. Make sure you are using a point from the spacing scale in `_settings/spacing.scss`.";
  }

  @return map-get($spacing-points, $spacing-point);
}

@mixin device-pixel-ratio($ratio: 2) {
  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),
    only screen and (min--moz-device-pixel-ratio: $ratio),
    only screen and (  -o-min-device-pixel-ratio: #{($ratio*10)} / 10),
    only screen and (     min-device-pixel-ratio: $ratio),
    only screen and (             min-resolution: #{($ratio*96)}dpi),
    only screen and (             min-resolution: #{$ratio}dppx) {
      @content;
    }
}

@mixin triangle-equilateral ($direction: down, $size: 20px, $colour: #000) {
  $secondWidth: $size / 1.732;
  border-color: transparent;
  border-width: $size;
  border-style: solid;
  width: 0;
  height: 0;
  content: "";

  @if $direction == down {
    border-width: $size $secondWidth 0 $secondWidth;
    border-color: $colour transparent transparent transparent;
  }

  @if $direction == up {
    border-width: 0 $secondWidth $size $secondWidth;
    border-color: transparent transparent $colour transparent;
  }

  @if $direction == left {
    border-width: $secondWidth $size $secondWidth 0;
    border-color: transparent $colour transparent transparent;
  }

  @if $direction == right {
    border-width: $secondWidth 0 $secondWidth $size;
    border-color: transparent transparent transparent $colour;
  }

}